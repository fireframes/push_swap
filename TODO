1. Get the input data and store it to a doubly linked list stack_a.
			- check args
				argumet count must be 2 or more, and 2nd input must not be empty
					return error if not
					
			- check both cases of input (several arguments or a string)
				if a string call ft_split()


			- check if more than 1
				if 1: what then?

			- check for empty, alphabetical, special chars


2. Initialize stack A and append input numbers to it

	- handle int overflow, duplicates, syntax errors
		if errors: free stack A and return error
	- check for each input, if it is a long int

	- append nodes to stack

3.  Check if A is sorted
	- if not sorted: implement sorting algorithm:
		- check for 2 numbers
			swap numbers
		- check for 3 numbers
			sort 3
		- if > 3 nums
			Turk Algorithm

4. Implement sorting algorithm optimal for 2, 3 and 5 elems.

5. Optimize algo Big O

6. Utils: 
	- functions for error handling
	- min / max nodes

// FIX naming ss/rr/rrr?

// rev_rotate_rrr had a problem

// problem with 1 or 2 numbers. head disappears

